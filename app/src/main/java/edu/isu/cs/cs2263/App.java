/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs.cs2263;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import java.util.ArrayList;

/**
 * @author Thomas Evans
 * @version v2.0.0
 */
public class App extends Application {

    /**
     * singleton require private constructor but the constructor javafx application extends must have a public constructor
     */
    private static App INSTANCE = null;
    public App() throws Exception{
        if (INSTANCE != null){
            throw new Exception("Object already exists");
        }
        INSTANCE = this;
    }

    /**
     *
     * @param myStage
     * @throws Exception
     */
    public void start(Stage myStage) throws Exception{
        GridPane root = new GridPane();

        //label for students column
        Label labelStudents = new Label("Students");
        root.add(labelStudents, 0, 0);

        ObservableList<Course> courses = FXCollections.observableArrayList();
        ListView courseListView = new ListView(courses);
        courseListView.setPrefSize(250,150);
        courseListView.setEditable(false);
        root.add(courseListView, 2, 1);

        ObservableList<Student> students = FXCollections.observableArrayList();
        ListView studentListView = new ListView(students);
        studentListView.setPrefSize(100,150);
        studentListView.setEditable(false);
        //handles clicking the students name to see their courses
        studentListView.getSelectionModel().selectedItemProperty().addListener(new ChangeListener<Student>() {
            @Override
            public void changed(ObservableValue<? extends Student> obervable, Student oldValue, Student newValue) {
                courses.clear();
                System.out.println("hellos");
                for (Course course : newValue.courseList){
                    courses.add(course);
                }
            }
        });
        root.add(studentListView, 0, 1);

        //label for making the "is taking" text
        Label isTaking = new Label("Is Taking");
        isTaking.setPadding(new Insets(0,10,0,10));
        root.add(isTaking, 1, 1);

        //label for courses column
        Label labelCourses = new Label("Courses");
        root.add(labelCourses, 2, 0);

        //button for generating content
        Button loadStudentsButton = new Button("Load Data");
        root.add(loadStudentsButton, 2, 2);

        //handles clicking load students button
        loadStudentsButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    System.out.println("first");

                    students.removeAll();

                    ArrayList<Student> tempStudentObjs = IOManager.readData("C:/Users/Thoma/CS2263/cs2263-hw02/app/src/main/java/edu/isu/cs/cs2263/Students.json");
                    System.out.println("second");

                    for (Student studentObj : tempStudentObjs){
                        students.add(studentObj);
                    }
                }
                catch (Exception e){
                    System.out.println("failed");
                    e.printStackTrace();
                    //we need to handle the exception
                }
            }
        });

        //sets title
        myStage.setTitle("Course View");
        myStage.setScene(new Scene(root, 500, 200));

        myStage.show();
    }

    //main is just used for launching the stage
    public static void main(String[] args) {
        launch(args);
    }
}

